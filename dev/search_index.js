var documenterSearchIndex = {"docs":
[{"location":"phasematching/#Phasematching","page":"Phasematching","title":"Phasematching","text":"","category":"section"},{"location":"phasematching/","page":"Phasematching","title":"Phasematching","text":"Modules = [NonlinearCrystals]\nPages = [\"phasematch.jl\", \"plot_phasematch.jl\"]","category":"page"},{"location":"phasematching/#NonlinearCrystals.CollinearPhaseMatch","page":"Phasematching","title":"NonlinearCrystals.CollinearPhaseMatch","text":"CollinearPhaseMatch <: PhaseMatch\n\nEncapsulates a full collinear phasematching solution, including refractive data, geometric parameters,  nonlinear efficiency, and bandwidths (fields refr_data, pm_data, eff_data, and bw_data, respectively). In addition, field access is forwarded to the internal fields of both refr_data and pm_data for convenience.\n\n\n\n\n\n","category":"type"},{"location":"phasematching/#NonlinearCrystals.PMBandwidthData","page":"Phasematching","title":"NonlinearCrystals.PMBandwidthData","text":"PMBandwidthData\n\nRepresents the phasematching bandwidths of a collinear configuration, defined as the range of parameters over which the phase mismatch Δk remains within ±π / L for a given interaction length L.\n\nThe stored values are ΔX · L quantities (units of Hz·m, K·m, rad·m), which characterize the tolerance of the phasematching condition to changes in each parameter X:\n\nomega_L_bw: Tuple of angular frequency bandwidths (Δω · L) for the three waves (r₁, r₂, b). Each entry is computed by holding that wave's frequency fixed while adjusting the other two to maintain the phasematching condition (1/λr₁ + 1/λr₂ = 1/λ_b).  \ntemp_L_bw: Temperature bandwidth (ΔT · L) computed by evaluating how Δk varies with small temperature changes, with all wavelengths and geometry fixed.\ntheta_L_bw: Angular bandwidth with respect to polar angle θ (Δθ · L), evaluated at fixed temperature and wavelengths.\nphi_L_bw: Angular bandwidth with respect to azimuthal angle ϕ (Δϕ · L), also at fixed conditions.\n\nThese values describe how sensitive the phasematching is to deviations in each parameter. For example, a small theta_L_bw means tight angular alignment is needed, while a large temp_L_bw suggests thermally robust operation.\n\nBandwidths are calculated as:\n\nΔX  L = frac2πΔkX\n\nwhere Δk is the phase mismatch, and X is one of frequency, temperature, or angle. \n\n\n\n\n\n","category":"type"},{"location":"phasematching/#NonlinearCrystals.PMCollinearData","page":"Phasematching","title":"NonlinearCrystals.PMCollinearData","text":"PMCollinearData\n\nRepresents the geometry and wavelengths of a collinear phasematching configuration, including propagation angles theta_pm and phi_pm, crystal reference, temperature, and polarization type data (hi_or_lo_rrb and optional PMType classification).\n\nThis is the geometric input used to calculate CollinearPhaseMatch properties.\n\n\n\n\n\n","category":"type"},{"location":"phasematching/#NonlinearCrystals.PMEfficiencyData","page":"Phasematching","title":"NonlinearCrystals.PMEfficiencyData","text":"PMEfficiencyData\n\nStores the effective nonlinear coefficient d_eff (with and without Miller scaling) and the associated conversion factor S₀·L². Used to compare the efficiency of different phasematching solutions based on geometry and polarization.\n\n\n\n\n\n","category":"type"},{"location":"phasematching/#NonlinearCrystals.PMType","page":"Phasematching","title":"NonlinearCrystals.PMType","text":"PMType\n\nDescribes the polarization type of a phasematching configuration, including the principal plane (e.g. :XY or :UD for uniaxial crystals), the polarization of each wave (:o or :e), and a human-readable type classification like \"I\", \"II/III\", \"IV\", or \"V\".\n\nUsed for diagnostic purposes and auto-labeling of phasematch types.\n\n\n\n\n\n","category":"type"},{"location":"phasematching/#NonlinearCrystals.calc_noncritical_pm_lines-Tuple{Symbol, Tuple{Symbol, Symbol, Symbol}, NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.calc_noncritical_pm_lines","text":"calc_noncritical_pm_lines(principal_axis, hi_or_lo_rrb, cr; ...)\n\nComputes the coordinates of Δk = 0 isolines in the λb-λr1 parameter space where noncritical phasematching is achieved (i.e., phase matching occurs at fixed propagation direction, along the crystal's principal_axis).\n\nReturns:\n\nsegments_b: vector of λ_b curves (x-axis)\nsegments_r: corresponding λ_r1 curves (y-axis)\ncb_intersections, cr_intersections: SHG symmetry intersection points (e.g., λb = λr / 2)\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.delta_k-Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Tuple{Symbol, Symbol, Symbol}, NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.delta_k","text":"delta_k(theta_pm, phi_pm, hi_or_lo_rrb, cr; lambda_r1, lambda_r2, lambda_b, temp)\n\nComputes the phase mismatch Δk = kr1 + kr2 - kb for a given configuration. Each `kiis calculated from2π * ni / λibased on the given crystalcr, propagation anglesthetapm,phipm, and the three polarization typeshiorlo_rrb`.\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.delta_k_with_shifting-Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Tuple{Symbol, Symbol, Symbol}, NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.delta_k_with_shifting","text":"delta_k_with_shifting(theta_pm, phi_pm, hi_or_lo_rrb, cr; ...)\n\nSame as delta_k, but allows small parameter perturbations (Δθ, Δϕ, ΔT, Δωr1, Δωr2, Δωb). The frequency shifts adjust the wavelengths while conserving energy (Δωr1 + Δωr2 = Δωb), enabling bandwidth estimation.\n\nUsed internally for computing how Δk varies with perturbations for calculating ΔX · L quantities in PMBandwidthData.\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.find_all_ncpm_over_lambda","page":"Phasematching","title":"NonlinearCrystals.find_all_ncpm_over_lambda","text":"find_all_ncpm_over_lambda(pol_rrb, cr, temp; lambda_r1, lambda_r2, lambda_b, ...)\n\nFinds all noncritical phasematches (NCPM) by varying wavelength, while keeping the temperature fixed. You must specify exactly one of the three wavelengths (lambda_r1, lambda_r2, or lambda_b) and leave the others as nothing. The scan range is chosen automatically based on the crystal's validity domain. Returns a list of CollinearPhaseMatch solutions found within the allowed range. The return value can be an empty array if no solution is found.\n\n\n\n\n\n","category":"function"},{"location":"phasematching/#NonlinearCrystals.find_all_ncpm_over_temp-Tuple{Tuple{Symbol, Symbol, Symbol}, NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.find_all_ncpm_over_temp","text":"find_all_ncpm_over_temp(pol_rrb, cr; lambda_r1, lambda_r2, lambda_b, temp_min, temp_max, ...)\n\nReturns all noncritical phasematching (NCPM) configurations where Δk = 0 can be achieved by tuning the temperature. You must specify at least two of the three wavelengths, and a temperature range [temp_min, temp_max]. The search is limited to propagation along principal axes. Returns an array of CollinearPhaseMatch solutions. The return value can be an empty array if no solution is found.\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.find_all_pms_along_dimension-Tuple{Tuple{Symbol, Symbol, Symbol}, NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.find_all_pms_along_dimension","text":"find_all_pms_along_dimension(pol_rrb, cr; ...)\n\nPerforms a one-dimensional search to find all collinear phasematching solutions (Δk ≈ 0) for a given polarization tuple pol_rrb.\n\nDepending on which parameters are held fixed (lambda_r1, lambda_r2, lambda_b, temp_min == temp_max, or angular constraints like theta_fixed), this scans over:\n\nWavelength (λb or λr1)\nTemperature\nAngle (θ or ϕ)\n\nThis function is the main backend used by higher-level routines like find_nearest_pm_along_theta_phi or find_all_ncpm_over_temp.\n\nReturns a list of CollinearPhaseMatch solutions found by detecting sign changes in Δk via a global search and refining them with bisection.\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.find_nearest_pm_along_lambda_r_b-Tuple{Tuple{Symbol, Symbol, Symbol}, NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.find_nearest_pm_along_lambda_r_b","text":"find_nearest_pm_along_lambda_r_b(pol_rrb, cr; lambda_r1, lambda_r2, lambda_b, ...)\n\nSearches for the best phasematch for a given pair of red and blue wavelengths. You must specify exactly one of lambda_r1 or lambda_r2, plus lambda_b.\n\nScans along both the missing red wavelength and the blue wavelength, finds all matching configurations (via find_all_pms_along_dimension), and returns the one closest to the provided values.\n\nUsed to fine-tune a target wavelength combination to an actual valid phasematch geometry.\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.find_nearest_pm_along_theta_phi-Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Tuple{Symbol, Symbol, Symbol}, NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.find_nearest_pm_along_theta_phi","text":"find_nearest_pm_along_theta_phi(theta_target, phi_target, pol_rrb, cr; ...)\n\nSearches for the phasematching configuration closest to a given direction (theta_target, phi_target) by  scanning phasematches at fixed θ or fixed ϕ, using find_all_pms_along_dimension.\n\nThe search returns the CollinearPhaseMatch whose propagation direction is most aligned (in dot product) with the target vector. Returns nothing if no solution is found.\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.plot_critical_pms-Tuple{NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.plot_critical_pms","text":"plot_critical_pms(cr::NonlinearCrystal; kwargs...) -> Figure\n\nVisualizes and compares critical phase-matching solutions for a given nonlinear crystal cr across all possible polarization configurations and propagation directions. This plot gives insight into how the phasematching  characteristics vary with angle for a fixed wavelength triplet (λr1, λr2, λ_b).\n\nEach horizontal segment in the figure corresponds to a distinct type of phase-matching configuration, and the plot shows how key quantities vary along that solution contour (i.e., as a function of θ and ϕ for which Δk = 0).\n\nPlotted Quantities per Phasematch\n\nFor each matched solution (Δk = 0), the following attributes are visualized:\n\nPhase velocity / c₀ — the normalized refractive indices (n)\nGroup velocity / c₀ — inverse group indices (group velocity dispersion)\nGDD — group delay dispersion (β₂), unit: fs²/mm\nWalkoff angle — spatial beam walkoff, unit: mrad\nω BW × L — angular frequency bandwidth product (Δω·L), from group velocity mismatch\nT BW × L — temperature tolerance (ΔT·L), from thermal dispersion mismatch\nϕ BW × L, θ BW × L — angular acceptance bandwidths\n|d_eff| — effective nonlinearity (with Miller scaling applied)\nϕ, θ — propagation angles\nType — phase-matching type and polarization roles (label only)\n\nOptional Arguments\n\nhi_or_lo_rrb: One or more polarization configurations (e.g., (:hi, :hi, :lo))\nlambda_r1, lambda_r2, lambda_b: At least two must be specified, the third is inferred\ntemp: Temperature at which to evaluate phasematching\nn_points: Angular resolution\nsize: Plot size as a tuple (width, height)\n\nOutput\n\nReturns a vertically stacked GLMakie Figure containing multiple linked plots, each showing one of the quantities above. Each horizontal span corresponds to a continuous critical phase-matching curve (i.e., varying θ and ϕ for fixed λ and T).\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.plot_delta_k_map-Tuple{Tuple{Symbol, Symbol, Symbol}, NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.plot_delta_k_map","text":"plot_delta_k_map(hi_or_lo_rrb, cr; ...)\n\nPlots a 2D or 3D map of the phasemismatch Δk over the angular domain (θ, ϕ) for a given polarization assignment (hi_or_lo_rrb) and wavelength triplet.\n\nDepending on plot_type:\n\n:polar → Shows Mercator style projected θ–ϕ map with Δk color-coded and phase match contours overlaid\n:sphere → Visualizes Δk on the surface of a 3D unit sphere using ray direction vectors\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.plot_noncritical_pms-Tuple{Symbol, NonlinearCrystal}","page":"Phasematching","title":"NonlinearCrystals.plot_noncritical_pms","text":"plot_noncritical_pms(principal_axis, cr; ...)\n\nGenerates an interactive plot of all noncritical phasematching lines (Δk = 0) in λb-λr1 space for a given crystal cr along the selected principal_axis.\n\nEach plotted contour represents a set of wavelength triplets (λr1, λr2, λ_b) that satisfy phasematching without angular adjustment. Supports both Type I (equal polarization) and Type II (cross-polarized) combinations.\n\nYou can control the polarization combination via hi_or_lo_rrb, limit the scan ranges, and adjust the resolution with ngrid.\n\nReturns a GLMakie Figure.\n\n\n\n\n\n","category":"method"},{"location":"phasematching/#NonlinearCrystals.pm_wavelengths-Tuple{}","page":"Phasematching","title":"NonlinearCrystals.pm_wavelengths","text":"pm_wavelengths(; lambda_r1=nothing, lambda_r2=nothing, lambda_b=nothing)\n\nGiven any two of the three wavelengths involved in a second-order three-wave interaction (λ_r1, λ_r2, λ_b), compute the third to satisfy energy conservation:\n\n1  λ_b = 1  λ_r1 + 1  λ_r2\n\nReturns the tuple (λr1, λr2, λ_b). Throws an error if the relation is not fulfilled or fewer than two inputs are provided. \n\n\n\n\n\n","category":"method"},{"location":"examples/adding_new_crystal/#Adding-a-new-nonlinear-crystal","page":"Adding new nonlinear crystals","title":"Adding a new nonlinear crystal","text":"","category":"section"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"To define a new nonlinear crystal in NonlinearCrystals.jl, you should to:","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"Provide metadata such as name, formula, symmetry group, and lattice parameters.\nDefine its principal refractive indices using a SellmeierFunction for each crystal axis.\nProvide the 3×3×3 nonlinear susceptibility tensor d_XYZ_full based on individual measured tensor components.\nOptionally, compute and include a Miller delta correction for frequency scaling.\nReturn the crystal as either a UnidirectionalCrystal or BidirectionalCrystal.","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"The definition should be wrapped in a create_<name>() function inside a file in src/crystal_data/.","category":"page"},{"location":"examples/adding_new_crystal/#Example:-Defining-BBO-as-an-unidirectional-nonlinear-crystal","page":"Adding new nonlinear crystals","title":"Example: Defining BBO as an unidirectional nonlinear crystal","text":"","category":"section"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"Below is a complete definition for BBO (Beta-barium borate), a widely used uniaxial nonlinear optical crystal. A similar file can be found in the crystal_data folder. ","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"Each crystal has its own file with the wrapping function, e.g.:","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"function create_bbo()\n    #... All the needed information as shown below should be placed here\n    return BBO\nend\n\n# Export and instantiate the crystal\nexport BBO\nBBO = create_bbo()","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"Inside the function, follow the steps above.","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"Metadata: Add basic metadata describing material properties as a dict. Especially the point group is needed to calculate the nonlinear tensor matching the crystal symmetry  based on individual components: ","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"metadata = Dict(\n    :description => \"BBO (Beta-barium borate)\",\n    :formula => \"β-BaB₂O₄\",\n    :point_group => \"3m\",\n    :lattice_params => (12.532u\"Å\", 12.532u\"Å\", 12.717u\"Å\"),\n    :density => 3.85u\"g/cm^3\",\n    :mohs_hardness => 4,\n)","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"Principal refractive indices: Specify the valid spectral range of Sellmeier model and add the refractive data as SellmeierFunction with a refractive index function and a reference temperature: ","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"    # Specify the valid spectral range and the reference temperature (typically room temperature) of the Sellmeier model\n    lambda_min = 0.189u\"µm\"\n    lambda_max = 3.5u\"µm\"\n    temp_ref = 293.15u\"K\"\n\n    # Define ordinary refractive index as an anonymous function, potentially also incorporating thermo-optic data\n    n_o = SellmeierFunction(\n        (λ, T) -> sqrt(2.7359 + 0.01878u\"µm^2\" / (λ^2 - 0.01822u\"µm^2\") - 0.01354u\"µm^-2\" * λ^2) - 16.6e-6u\"K^-1\" * (T - temp_ref),\n        (lambda_min, lambda_max);\n        temp_ref,\n    )\n\n    # Define extraordinary refractive index in a similar way\n    n_e = SellmeierFunction(\n        (λ, T) -> sqrt(2.3753 + 0.01224u\"µm^2\" / (λ^2 - 0.01667u\"µm^2\") - 0.01516u\"µm^-2\" * λ^2) - 9.3e-6u\"K^-1\" * (T - temp_ref),\n        (lambda_min, lambda_max);\n        temp_ref,\n    )","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"The nonlinear susceptibility tensor: ","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"The function d_XYZ_full lets you compute the full nonlinear tensor in the dielectric frame. Rotations into this frame can be specified as a rotation matrix if needed. See the file for BIBO as an example. In the present case, d15 and d22 are the two non-zero coefficients for BBO's 3m point group; all other components are set automatically based on the crystal's point group: ","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"    d_XYZ_full = calc_d_XYZ_full(\n        metadata[:point_group]; \n        d22 = -2.2u\"pm/V\", \n        d15 = 0.08u\"pm/V\"\n    )","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"The full or contracted tensors can in the end be shown using BBO.d_XYZ_ref_full or BBO.d_XYZ_ref, respectively. ","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"Miller delta: Compute Miller scaling data for corrections of d_eff if the wavelengths during the measurements of the specified tensor components are known. For example, if the specified tensor components d15 and d22 are known to be measured using the second-harmonic generation of 1064 nm light, calculate the miller delta tensor using: ","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"    miller_delta = calc_miller_delta(\n        d_XYZ_full, \n        n_o, \n        n_e, \n        temp_ref; \n        lambda_r1 = 1064u\"nm\", \n        lambda_r2 = 1064u\"nm\"\n    )","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"Returning the crystal object: Finally, construct and return the actual crystal object:","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"    BBO = UnidirectionalCrystal(\n        metadata,\n        n_o,\n        n_e,\n        d_XYZ_full;\n        miller_delta,\n    )\n    return BBO","category":"page"},{"location":"examples/adding_new_crystal/","page":"Adding new nonlinear crystals","title":"Adding new nonlinear crystals","text":"It is helpful to add the references to the publications of the used data as comments.  Make also sure that the specified data is working as expected by adding a corresponding test file for each new nonlinear crystal. They should be placed in the crystal data test folder. ","category":"page"},{"location":"refractive_index/#Refractive-Index","page":"Refractive Index","title":"Refractive Index","text":"","category":"section"},{"location":"refractive_index/","page":"Refractive Index","title":"Refractive Index","text":"Modules = [NonlinearCrystals]\nPages = [\"refractive_index.jl\", \"crystals.jl\", \"crystal_symmetry.jl\", \"d_tensor.jl\"]","category":"page"},{"location":"refractive_index/#NonlinearCrystals.SellmeierFunction","page":"Refractive Index","title":"NonlinearCrystals.SellmeierFunction","text":"SellmeierFunction(n_fun, lambda_range=nothing; temp_ref=293.15u\"K\", temp_range=nothing)\n\nWraps a wavelength- and temperature-dependent refractive index function in a RefractiveIndex model.  This is typically used to represent Sellmeier equations or any function that evaluates n(λ, T), possibly dependent on a reference temperature temp_ref. If lambda_range and temp_range are provided, they define the validity range and are checked optionally during evaluation.\n\n\n\n\n\n","category":"type"},{"location":"refractive_index/#NonlinearCrystals.default_lambda-Tuple{NonlinearCrystals.RefractiveIndex}","page":"Refractive Index","title":"NonlinearCrystals.default_lambda","text":"default_lambda(ri::RefractiveIndex)\n\nReturns a default wavelength for use with the refractive index model ri. If ri.lambda_range is defined, it returns the midpoint of the range; otherwise, it defaults to 633 nm.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.default_temp-Tuple{NonlinearCrystals.RefractiveIndex}","page":"Refractive Index","title":"NonlinearCrystals.default_temp","text":"default_temp(ri::RefractiveIndex)\n\nReturns the reference temperature temp_ref defined in the refractive index model ri. This is typically used as the default when no explicit temperature is provided.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.dn_dtemp","page":"Refractive Index","title":"NonlinearCrystals.dn_dtemp","text":"dn_dtemp(ri::RefractiveIndex, lambda::Length=default_lambda(ri), temp::Temperature=default_temp(ri))\n\nComputes the temperature derivative of the RefractiveIndex at the specified wavelength lambda and temperature temp. This is used to analyze thermal drift, tuning, or thermal lensing effects in nonlinear and resonant systems.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.group_index","page":"Refractive Index","title":"NonlinearCrystals.group_index","text":"group_index(ri, lambda=default_lambda(ri), temp=default_temp(ri))\n\nComputes the group index n_g, which determines the group velocity in a dispersive medium. This is calculated as β₁ · c, where β₁ is the first derivative of the propagation constant with respect to angular frequency. The result is unitless.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.group_velocity","page":"Refractive Index","title":"NonlinearCrystals.group_velocity","text":"group_velocity(ri::RefractiveIndex, lambda::Length=default_lambda(ri), temp::Temperature=default_temp(ri))\n\nComputes the group velocity of a wavepacket centered at lambda, using the first derivative of the wavevector with respect to frequency. This quantity reflects how the envelope of a pulse propagates through the medium.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.is_lambda_valid-Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, SellmeierFunction}","page":"Refractive Index","title":"NonlinearCrystals.is_lambda_valid","text":"is_lambda_valid(lambda::Length, sri::SellmeierFunction; warn_tol::Length=1u\"nm\")\n\nChecks whether the given wavelength is within the valid lambda_range of a SellmeierFunction. A tolerance warn_tol can be specified to allow for small numerical deviations near the boundaries. Returns true if the wavelength lies within the specified valid range, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.phase_velocity","page":"Refractive Index","title":"NonlinearCrystals.phase_velocity","text":"phase_velocity(ri::RefractiveIndex, lambda::Length=default_lambda(ri), temp::Temperature=default_temp(ri))\n\nReturns the phase velocity v_p = c / n(λ) of a monochromatic wave in the material described by ri at the given conditions. The result has physical units of velocity.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.plot_refractiveindex!-Tuple{NonlinearCrystals.RefractiveIndex}","page":"Refractive Index","title":"NonlinearCrystals.plot_refractiveindex!","text":"plot_refractiveindex!(ri::RefractiveIndex; n_sample_pts=500, temp=nothing, lambda_min=nothing,\n                      lambda_max=nothing, label=\"\", colormap=:vik, digits::Integer=3)\n\nAdds a refractive index vs. wavelength curve to the current GLMakie axis, optionally for multiple temperatures. This is useful for overlaying plots from different models or conditions. The interactive inspector shows wavelength, index, and temperature.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.plot_refractiveindex-Tuple{NonlinearCrystals.RefractiveIndex}","page":"Refractive Index","title":"NonlinearCrystals.plot_refractiveindex","text":"plot_refractiveindex(ri::RefractiveIndex; n_sample_pts=500, temp=nothing, lambda_min=nothing, lambda_max=nothing, label=\"\", colormap=:vik)\n\nCreates and returns a new GLMakie plot of the refractive index as a function of wavelength, optionally at multiple temperatures if      a vector of temperatures is provided. If temp is omitted, the reference temperature of ri is used. \n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.refractive_index","page":"Refractive Index","title":"NonlinearCrystals.refractive_index","text":"refractive_index(sri::SellmeierFunction, lambda::Length, temp::Temperature=sri.temp_ref;\n                 check_lambda_range::Symbol=:warn, check_temp_range::Symbol=:warn,\n                 warn_tol::Length=1u\"nm\")\n\nEvaluates the refractive index for a given wavelength and temperature using the stored function inside a SellmeierFunction. If bounds are set and check_lambda_range or check_temp_range is not :none, warnings or errors are issued for out-of-range inputs. Returns a unitless number corresponding to the refractive index.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.BidirectionalCrystal","page":"Refractive Index","title":"NonlinearCrystals.BidirectionalCrystal","text":"BidirectionalCrystal(metadata::Dict,\n                     n_X_principal::RefractiveIndex,\n                     n_Y_principal::RefractiveIndex,\n                     n_Z_principal::RefractiveIndex,\n                     d_XYZ_ref_full::AbstractArray{<:Number,3};\n                     miller_delta=nothing,\n                     warn_n_Z_smaller_n_X=true)\n\nConstructs a biaxial crystal using separate refractive index models for the principal X, Y, and Z axes, along with a full nonlinear tensor d_XYZ_ref_full. The metadata must include a valid :point_group. If warn_n_Z_smaller_n_X is true, a warning is issued if the crystal axes are not sorted as n_Z ≥ n_Y ≥ n_X, which is the expected convention in this package. If miller_delta is provided, it is used for Miller scaling of the effective nonlinear coefficient d_eff.\n\n\n\n\n\n","category":"type"},{"location":"refractive_index/#NonlinearCrystals.RefractionData","page":"Refractive Index","title":"NonlinearCrystals.RefractionData","text":"RefractionData(hi_or_lo::Symbol, theta::Angle, phi::Angle, cr::NonlinearCrystal, lambda::Length=default_lambda(cr);\n               temp::Temperature=default_temp(cr))\n\nConvenience constructor that combines computation and extraction: builds a RefractionDataHiLo and returns the  single-polarization RefractionData corresponding to :hi or :lo.\n\n\n\n\n\n","category":"type"},{"location":"refractive_index/#NonlinearCrystals.RefractionData-2","page":"Refractive Index","title":"NonlinearCrystals.RefractionData","text":"RefractionData\n\nA single-branch slice of RefractionDataHiLo corresponding to either the :hi or :lo polarization branch. Stores all relevant scalar and vector optical quantities for one mode: refractive index, group index, Poynting vector, polarization directions, walk-off, and β dispersion parameters.\n\n\n\n\n\n","category":"type"},{"location":"refractive_index/#NonlinearCrystals.RefractionDataHiLo","page":"Refractive Index","title":"NonlinearCrystals.RefractionDataHiLo","text":"RefractionDataHiLo(theta::Angle, phi::Angle, cr::NonlinearCrystal, lambda::Length=default_lambda(cr);\n                   temp::Temperature=default_temp(cr), angle_tol::Angle=0.1u\"°\")\n\nConstructs a high/low index birefringent refraction object RefractionDataHiLo for a given propagation direction defined by spherical angles theta, phi.  Internally calculates refractive indices, energy and phase directions, walk-off angles, group indices, and frequency derivatives  for both polarization branches. Polarization classification is automatic based on principal planes or optical axis orientation.\n\n\n\n\n\n","category":"type"},{"location":"refractive_index/#NonlinearCrystals.RefractionDataHiLo-2","page":"Refractive Index","title":"NonlinearCrystals.RefractionDataHiLo","text":"RefractionDataHiLo\n\nContains all relevant optical data for the two birefringent branches (:hi and :lo) in a nonlinear crystal. Includes refractive indices, group indices, energy flow vectors, walk-off angles, and dispersion derivatives (β₀ through β₃). Computed for a specific propagation direction, wavelength, and temperature. RefractionDataHiLo can be split into RefractionData instances to represent only one of both polarization branches.\n\n\n\n\n\n","category":"type"},{"location":"refractive_index/#NonlinearCrystals.RefractionType","page":"Refractive Index","title":"NonlinearCrystals.RefractionType","text":"RefractionType\n\nDescribes a single polarization state (:o or :e) in a specified principal plane.\n\n\n\n\n\n","category":"type"},{"location":"refractive_index/#NonlinearCrystals.RefractionType-Tuple{Symbol, NonlinearCrystals.RefractionTypeHiLo}","page":"Refractive Index","title":"NonlinearCrystals.RefractionType","text":"RefractionType(hi_or_lo::Symbol, rt::RefractionTypeHiLo)\n\nExtracts a single-polarization RefractionType from a two-branch RefractionTypeHiLo, corresponding to either the high or low index solution.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.RefractionTypeHiLo","page":"Refractive Index","title":"NonlinearCrystals.RefractionTypeHiLo","text":"RefractionTypeHiLo\n\nDescribes the polarization type of the two birefringent solutions (:hi and :lo) in a given principal plane. Each polarization is labeled as ordinary (:o) or extraordinary (:e) based on field orientation.\n\n\n\n\n\n","category":"type"},{"location":"refractive_index/#NonlinearCrystals.RefractionTypeHiLo-Tuple{Symbol, Tuple{var\"#s182\", var\"#s182\"} where var\"#s182\"<:(AbstractVector{<:Number})}","page":"Refractive Index","title":"NonlinearCrystals.RefractionTypeHiLo","text":"RefractionTypeHiLo(principal_plane::Symbol, E_dir_hi_lo::NTuple{2,<:AbstractVector{<:Number}})\n\nClassifies a pair of electric field directions as ordinary or extraordinary relative to the specified principal plane.  Used to track the polarization type of high and low index branches in birefringent crystals.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.UnidirectionalCrystal","page":"Refractive Index","title":"NonlinearCrystals.UnidirectionalCrystal","text":"UnidirectionalCrystal(metadata::Dict, n_o_principal::RefractiveIndex,\n                      n_e_principal::RefractiveIndex,\n                      d_XYZ_ref_full::AbstractArray{<:Number,3};\n                      miller_delta=nothing)\n\nConstructs a uniaxial crystal with ordinary (n_o_principal) and extraordinary (n_e_principal) refractive index models, and a full 3×3×3 nonlinear tensor d_XYZ_ref_full. The metadata must include a recognized :point_group keyword. If miller_delta is provided, it is used for Miller scaling of the effective nonlinear coefficient d_eff. The Z axis is treated as the optical axis.\n\n\n\n\n\n","category":"type"},{"location":"refractive_index/#NonlinearCrystals.assign_o_or_e-Tuple{Symbol, AbstractVector{<:Number}}","page":"Refractive Index","title":"NonlinearCrystals.assign_o_or_e","text":"assign_o_or_e(principal_plane::Symbol, E_dir::AbstractVector{<:Number}; angle_tol_ud::Angle=0.2u\"°\")\n\nClassifies a polarization vector E_dir as ordinary (:o) or extraordinary (:e) with respect to the given principal_plane. In uniaxial crystals (:UD), the classification depends on the angle between E_dir and the optical axis. In biaxial crystals, the function assumes E_dir lies in or perpendicular to the specified principal plane (:XY, :XZ, or :YZ), and emits an assertion otherwise. Returns the symbol :o or :e depending on the geometric configuration.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.calc_E_dir_S_dir-Tuple{AbstractVector{<:Real}, AbstractMatrix{<:Real}, Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}}","page":"Refractive Index","title":"NonlinearCrystals.calc_E_dir_S_dir","text":"calc_E_dir_S_dir(k_dir::AbstractVector{<:Real},\n                 ε_tensor::AbstractMatrix{<:Real},\n                 D_dir_hi_lo::Tuple)\n\nFrom the D vectors and dielectric tensor, computes the electric field directions E = ε⁻¹·D and corresponding  Poynting vectors S = E × H, where H = k × E. The resulting vectors are normalized and aligned with k_dir.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.calc_k_dir_ε_tensor_n_XYZ","page":"Refractive Index","title":"NonlinearCrystals.calc_k_dir_ε_tensor_n_XYZ","text":"calc_k_dir_ε_tensor_n_XYZ(θ::Angle, ϕ::Angle, cr::NonlinearCrystal,\n                          lambda::Length=default_lambda(cr),\n                          temp::Temperature=default_temp(cr))\n\nComputes the wavevector direction from spherical angles and constructs the dielectric tensor ε for the given crystal cr and conditions.  Also returns the principal refractive indices along the X, Y, and Z axes for the given wavelength lambda and temperature temp.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.calc_n_hi_lo-Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, NonlinearCrystal, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Refractive Index","title":"NonlinearCrystals.calc_n_hi_lo","text":"calc_n_hi_lo(θ::Angle, ϕ::Angle, cr::NonlinearCrystal, lambda::Length; temp::Temperature)\n\nComputes the refractive indices of the two birefringent eigenmodes for a given direction in spherical angles.  This is a minimal calculation used for derivative tracing (e.g., with ForwardDiff) and does not return field vectors.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.calc_n_hi_lo_D_dir_hi_lo-Tuple{AbstractVector{<:Real}, AbstractMatrix{<:Real}}","page":"Refractive Index","title":"NonlinearCrystals.calc_n_hi_lo_D_dir_hi_lo","text":"calc_n_hi_lo_D_dir_hi_lo(k_dir::AbstractVector{<:Real}, ε_tensor::AbstractMatrix{<:Real})\n\nGiven a propagation direction k_dir and dielectric tensor ε_tensor, computes the two effective refractive indices and corresponding  displacement vectors (D) for the birefringent modes. Works by diagonalizing the projected dielectric tensor in the plane orthogonal to k_dir.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.default_lambda-Tuple{NonlinearCrystal}","page":"Refractive Index","title":"NonlinearCrystals.default_lambda","text":"default_lambda(cr::NonlinearCrystal)\n\nReturns a default wavelength for use with a crystal cr. If a wavelength range is defined for the X-axis principal index, the midpoint of that range is returned. Otherwise, the default value is 633 nm.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.default_temp-Tuple{NonlinearCrystal}","page":"Refractive Index","title":"NonlinearCrystals.default_temp","text":"default_temp(cr::NonlinearCrystal)\n\nReturns the reference temperature from the X-axis principal refractive index of the crystal cr. This is typically used when no explicit temperature is provided.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.hi_lo_to_o_e","page":"Refractive Index","title":"NonlinearCrystals.hi_lo_to_o_e","text":"hi_lo_to_o_e(hi_or_lo::Symbol, cr::UnidirectionalCrystal, lambda::Length=default_lambda(cr); temp::Temperature=default_temp(cr))\n\nMaps a :hi or :lo refractive index label to the corresponding polarization :o or :e, based on the actual indices at the given wavelength and temperature. This is the inverse of o_e_to_hi_lo and assumes uniaxial behavior.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.hi_lo_to_o_e-Tuple{Tuple{Symbol, Symbol, Symbol}, UnidirectionalCrystal, Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}}","page":"Refractive Index","title":"NonlinearCrystals.hi_lo_to_o_e","text":"hi_lo_to_o_e(hi_or_lo_rrb::NTuple{3,Symbol}, cr::UnidirectionalCrystal, lambda_rrb::NTuple{3,Length}; temp::Temperature=default_temp(cr))\n\nApplies hi_lo_to_o_e elementwise to a 3-tuple of :hi/:lo labels and corresponding wavelengths, for use in triple-wave processes. Returns a tuple of :o/:e polarization labels.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.is_lambda_valid-Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, NonlinearCrystal}","page":"Refractive Index","title":"NonlinearCrystals.is_lambda_valid","text":"is_lambda_valid(lambda::Length, cr::NonlinearCrystal; warn_tol::Length=1u\"nm\")\n\nChecks whether the given wavelength lies within the valid wavelength range of all three principal refractive index models of the crystal cr. A tolerance warn_tol allows small deviations near the boundaries. Returns true if the wavelength is valid for all three axes, otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.o_e_to_hi_lo","page":"Refractive Index","title":"NonlinearCrystals.o_e_to_hi_lo","text":"o_e_to_hi_lo(o_or_e::Symbol, cr::UnidirectionalCrystal, lambda::Length=default_lambda(cr); temp::Temperature=default_temp(cr))\n\nMaps a polarization label :o or :e to a high (:hi) or low (:lo) refractive index, based on the comparison between ordinary and extraordinary indices at the given wavelength and temperature. Returns :hi if the refractive index for the given polarization is larger than the other, and :lo otherwise.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.o_e_to_hi_lo-Tuple{Tuple{Symbol, Symbol, Symbol}, UnidirectionalCrystal, Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}}","page":"Refractive Index","title":"NonlinearCrystals.o_e_to_hi_lo","text":"o_e_to_hi_lo(o_or_e_rrb::NTuple{3,Symbol}, cr::UnidirectionalCrystal, lambda_rrb::NTuple{3,Length}; temp::Temperature=default_temp(cr))\n\nApplies o_e_to_hi_lo elementwise to a 3-tuple of polarizations o_e_to_hi_lo and a 3-tuple of wavelengths lambda_rrb,  corresponding to the first (typically the longest wavelength) and second red wavelength and the blue wavelength. Returns a 3-tuple of :hi/:lo symbols.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.optical_axis_angle","page":"Refractive Index","title":"NonlinearCrystals.optical_axis_angle","text":"optical_axis_angle(cr::BidirectionalCrystal, lambda::Length=default_lambda(cr), temp::Temperature=default_temp(cr))\n\nComputes the angle between the optical axis and the principal Z-axis for a biaxial crystal cr, based on the principal refractive indices at the specified wavelength and temperature. Returns an angle between 0 and 90°.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.optical_axis_angle-2","page":"Refractive Index","title":"NonlinearCrystals.optical_axis_angle","text":"optical_axis_angle(cr::UnidirectionalCrystal, lambda::Length=default_lambda(cr), temp::Temperature=default_temp(cr))\n\nReturns the optical axis angle for a uniaxial crystal, which is always zero by definition since the optical axis aligns with the principal Z-axis.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.plot_birefringent_refraction","page":"Refractive Index","title":"NonlinearCrystals.plot_birefringent_refraction","text":"plot_birefringent_refraction(theta, phi, cr::NonlinearCrystal,\n                              lambda::Length=default_lambda(cr),\n                              temp::Temperature=default_temp(cr))\n\nCreates a 3D GLMakie visualization of birefringent refraction for the given direction and crystal. The plot shows the index ellipsoid,  wavevector direction k, and the Poynting vector (S), electric fields (E), and displacement (D) vectors for both high and low index solutions.  Useful for verifying polarization, walk-off behavior, and eigenvector orientation.\n\n\n\n\n\n","category":"function"},{"location":"refractive_index/#NonlinearCrystals.plot_refractiveindex-Tuple{BidirectionalCrystal}","page":"Refractive Index","title":"NonlinearCrystals.plot_refractiveindex","text":"plot_refractiveindex(cr::BidirectionalCrystal; n_sample_pts=500,\n                     temp=[default_temp(cr)], lambda_min=nothing, lambda_max=nothing)\n\nPlots the refractive indices n_X, n_Y, and n_Z as functions of wavelength for a biaxial crystal using GLMakie. Each principal axis is drawn with a different color and can optionally show temperature dependence. Returns a figure with legend and interactive inspection enabled.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.plot_refractiveindex-Tuple{UnidirectionalCrystal}","page":"Refractive Index","title":"NonlinearCrystals.plot_refractiveindex","text":"plot_refractiveindex(cr::UnidirectionalCrystal; n_sample_pts=500,\n                     temp=[default_temp(cr)], lambda_min=nothing, lambda_max=nothing)\n\nPlots the ordinary (n_X = n_Y) and extraordinary (n_Z) refractive indices of a uniaxial crystal over wavelength using GLMakie. The ordinary index is shown once for both X and Y, and different colormaps distinguish the two polarizations. Returns a Makie figure with labeled axes, legend, and interactive inspection.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.polarization_rrb_to_hi_lo-Tuple{Tuple{Symbol, Symbol, Symbol}, NonlinearCrystal, Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}}","page":"Refractive Index","title":"NonlinearCrystals.polarization_rrb_to_hi_lo","text":"polarization_rrb_to_hi_lo(pol_rrb::NTuple{3,Symbol}, cr::NonlinearCrystal, lambda_rrb::NTuple{3,Length}; temp::Temperature=default_temp(cr))\n\nConverts a 3-tuple of polarization symbols (:o/:e or :hi/:lo) to :hi/:lo, depending on the type of crystal and the refractive indices at the given wavelengths. Only uniaxial crystals support conversion from :o/:e; other crystal types require the input to already use :hi/:lo. Returns a 3-tuple of :hi/:lo symbols or emits an error if the input is invalid.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.valid_lambda_range-Tuple{NonlinearCrystal}","page":"Refractive Index","title":"NonlinearCrystals.valid_lambda_range","text":"valid_lambda_range(cr::NonlinearCrystal)\n\nReturns the range of wavelengths that is valid across all three principal axes of the crystal cr. The result is the intersection of the individual wavelength ranges for n_X, n_Y, and n_Z.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.crystal_system-Tuple{AbstractString}","page":"Refractive Index","title":"NonlinearCrystals.crystal_system","text":"crystal_system(point_group::AbstractString)\n\nReturns the name of the crystal system corresponding to the given crystallographic point group (e.g., \"mm2\" → \"Orthorhombic\"). Throws an error if the point group is unknown. Based on conventional assignments from nonlinear optics literature.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.plot_symmetry-Tuple{AbstractString}","page":"Refractive Index","title":"NonlinearCrystals.plot_symmetry","text":"plot_symmetry(point_group::AbstractString)\n\nVisualizes the symmetry relations between nonlinear tensor components d_ij for a given point group.\n\nBlack lines indicate symmetry relations that follow from the basic point group; dashed lines show those that appear only under Kleinman symmetry assumptions. Black circles represent same-sign components; white circles represent opposite signs. Square markers indicate coefficients that become zero under Kleinman conditions.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.calc_d_eff-Tuple{NonlinearCrystal, AbstractVector{<:Number}, AbstractVector{<:Number}, AbstractVector{<:Number}}","page":"Refractive Index","title":"NonlinearCrystals.calc_d_eff","text":"calc_d_eff(cr::NonlinearCrystal,\n           E_dir_r1, E_dir_r2, E_dir_b;\n           lambda_rrb=nothing, temp=default_temp(cr), use_miller_scaling=true)\n\nComputes the effective nonlinear coefficient d_eff for a given nonlinear crystal and polarization directions E_dir_r1, E_dir_r2, E_dir_b.\n\nIf lambda_rrb (a 3-tuple of wavelengths) is provided and Miller data is available, the tensor is scaled using Miller's rule. Otherwise, the reference tensor d_XYZ_ref_full is used directly without Miller scaling.  \n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.calc_miller_delta-Tuple{AbstractArray{<:Number, 3}, NonlinearCrystals.RefractiveIndex, NonlinearCrystals.RefractiveIndex, NonlinearCrystals.RefractiveIndex, Union{Unitful.Quantity{T, 𝚯, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝚯, U}} where {L, S}} where {T, U}}","page":"Refractive Index","title":"NonlinearCrystals.calc_miller_delta","text":"calc_miller_delta(d_ref_XYZ_full, n_X_principal, n_Y_principal, n_Z_principal, temp_ref;\n                  lambda_r1=nothing, lambda_r2=nothing, lambda_b=nothing)\n\nComputes the Miller scaling tensor Δᵢⱼₖ from a known nonlinear tensor d_ref_XYZ_full and refractive index models.\n\nEach χ⁽²⁾ component is scaled by the product of χ⁽¹⁾ values (defined as n² − 1) for the corresponding directions and wavelengths. You may also call this function with n_o_principal and n_e_principal for uniaxial crystals.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.contract_d_tensor-Tuple{AbstractArray{<:Number, 3}}","page":"Refractive Index","title":"NonlinearCrystals.contract_d_tensor","text":"contract_d_tensor(d_full::AbstractArray{<:Number,3})\n\nContracts a 3×3×3 nonlinear tensor into a 3×6 Voigt representation, assuming symmetry in the last two indices. This is the inverse of expand_d_contract.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.contract_voigt_index-Tuple{Integer, Integer, Integer}","page":"Refractive Index","title":"NonlinearCrystals.contract_voigt_index","text":"contract_voigt_index(i::Integer, j::Integer, k::Integer) -> (i::Int, l::Int)\n\nGiven full tensor indices (i, j, k), return the contracted Voigt index (i, l). This assumes symmetry in (j, k): for example, (1,3) and (3,1) both map to l = 5.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.expand_d_contract-Tuple{AbstractMatrix{<:Number}}","page":"Refractive Index","title":"NonlinearCrystals.expand_d_contract","text":"expand_d_contract(d_contract::AbstractMatrix{<:Number})\n\nExpands a 3×6 Voigt-contracted nonlinear tensor into a full 3×3×3 tensor with explicit symmetry in the second and third indices.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.expand_voigt_index-Tuple{Integer, Integer}","page":"Refractive Index","title":"NonlinearCrystals.expand_voigt_index","text":"expand_voigt_index(i::Integer, l::Integer)\n\nExpands a contracted Voigt index pair (i, l) into the corresponding set of full tensor indices (i, j, k). If l refers to a symmetric index (like l = 5 for j,k = 1,3 and 3,1), both permutations are returned.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.miller_rescale-Tuple{NonlinearCrystal, Union{Nothing, Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}}}","page":"Refractive Index","title":"NonlinearCrystals.miller_rescale","text":"miller_rescale(cr::NonlinearCrystal, lambda_rrb; temp=default_temp(cr))\n\nApplies Miller scaling to the reference nonlinear tensor stored in cr, using its miller_delta data (if available).\n\nThe result is a scaled tensor d_XYZ_full for the given wavelength triplet lambda_rrb = (λ₁, λ₂, λ₃). This models the variation of nonlinear response with wavelength using Miller's empirical rule.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.plot_axes_assignment_crys_to_diel-Tuple{Tuple{Symbol, Symbol, Symbol}}","page":"Refractive Index","title":"NonlinearCrystals.plot_axes_assignment_crys_to_diel","text":"plot_axes_assignment_crys_to_diel(axes_assignment_crys_to_diel::NTuple{3,Symbol};\n                                  rotate_about::Union{Symbol,Nothing}=nothing,\n                                  phi::Angle=0.0u\"°\")\n\nVisualizes the transformation from crystallophysical axes (x, y, z) to dielectric axes (X, Y, Z) in 3D using GLMakie. The original axes are shown as dashed blue vectors, and the rotated dielectric frame is shown as solid red vectors. Used to verify the effect of rot_mat_crys_to_diel.\n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.plot_miller_scaling_coeffs_shg-Tuple{NonlinearCrystal}","page":"Refractive Index","title":"NonlinearCrystals.plot_miller_scaling_coeffs_shg","text":"plot_miller_scaling_coeffs_shg(cr::NonlinearCrystal;\n                               temp=default_temp(cr),\n                               size=(800, 600))\n\nVisualizes the Miller-scaled nonlinear tensor coefficients d_ij(λ) for second harmonic generation (SHG) as a function of blue wavelength λ_b. Assumes type-0 SHG, where the red wavelengths are 2λ_b. All nonzero contracted components are plotted with interactive tooltips showing  wavelength and coefficient values. \n\n\n\n\n\n","category":"method"},{"location":"refractive_index/#NonlinearCrystals.rot_mat_crys_to_diel-Tuple{Tuple{Symbol, Symbol, Symbol}}","page":"Refractive Index","title":"NonlinearCrystals.rot_mat_crys_to_diel","text":"rot_mat_crys_to_diel(axes_assignment_crys_to_diel::NTuple{3,Symbol};\n                     rotate_about::Union{Symbol,Nothing}=nothing,\n                     phi::Angle=0.0u\"°\")\n\nReturns a 3×3 rotation matrix that maps crystallophysical coordinates (x, y, z) to dielectric coordinates (X, Y, Z), based on an axis assignment tuple like (:Z, :X, :Y).\n\nAn optional additional rotation can be applied around the assigned dielectric axis (:X, :Y, or :Z) by an angle phi. This is used to align the nonlinear tensor with the dielectric frame expected by the rest of the simulation.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = NonlinearCrystals","category":"page"},{"location":"#NonlinearCrystals.jl","page":"Introduction","title":"NonlinearCrystals.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"NonlinearCrystals.jl is a Julia package for analyzing and simulating nonlinear optical processes in birefringent crystals. It provides tools for evaluating refractive data, finding phasematches, and generating plots of critical and noncritical phase matches.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"NonlinearCrystals.jl is not yet registered in the general Julia registry. To install the package, clone it using Julia's package manager:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"]dev https://github.com/martinkosch/NonlinearCrystals.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This will clone the package locally and tracks its latest development version.","category":"page"},{"location":"#Current-Features","page":"Introduction","title":"Current Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Refraction modeling for uniaxial and biaxial nonlinear crystals  \nComputation of group velocities, walkoff angles, and dispersion terms \nCalculation of effective nonlinearity d_texteff with or without Miller scaling\nDetermination of critical and noncritical collinear phase-matching conditions\nStrict use of units based on Unitful.jl\nVisualization tools for:\nWavelength and temperature-dependent refractive indices\nMiller scaling of nonlinear coefficients\nVarious Δk plots for critical phasematches \nNoncritical phasematching lines and SHG points","category":"page"},{"location":"#Example-Usage","page":"Introduction","title":"Example Usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"You can use the package to inspect the nonlinear and refractive properties of various crystals, find phase-matching directions, and generate interactive plots.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For example, to find and analyze a critical type I phasematch for third-harmonic generation of 1064 nm light in LBO:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using NonlinearCrystals\nusing Unitful\n\n# Define phasematch parameters\nlambda_r1=1064u\"nm\"\nlambda_r2=532u\"nm\"\ntemp = 293.15u\"K\"\nhi_or_lo_rrb=[(:hi, :hi, :lo), (:lo, :lo, :hi)]\n\n# Display and plot all possible type I phasematches\nplot_critical_pms(LBO; hi_or_lo_rrb, lambda_r1, lambda_r2, temp)\n\n# Visualize critical phase matches for (:hi, :hi, :lo); interactive label on mouseover might take a few seconds for precompilation\nplot_delta_k_map(hi_or_lo_rrb[1], LBO; lambda_r1, lambda_r2, temp, plot_type=:sphere)\n\n# Find a specific phasematch\ntheta = 90u\"°\"\nphi = 30u\"°\"\njulia> pm = find_nearest_pm_along_theta_phi(theta, phi, hi_or_lo_rrb[1], LBO; lambda_r1, lambda_r2, temp)\n\nCrystal:                      LBO (Lithium Triborate)\nk angles:                     θ: 90.00°, ϕ: 37.22°\nk direction:                  [0.796, 0.605, 0.0]      \nTemperature:                  293.15 K (20.00 °C)\n────────────────────────────────────────────────────────────────────────────────────────────────────────\nWavelength (nm):              1064.0                    532.0                     354.667                  \nRefractive index type:        hi                        hi                        lo                       \nType I PM in XY plane:        o                         o                         e                        \nPhase velocity / c₀:          1.605                     1.622                     1.616                    \nGroup velocity / c₀:          1.626                     1.656                     1.690                    \nWalkoff angle (mrad):         0.000                     0.000                     18.070                   \nS direction:                  [0.796, 0.605, 0.0]       [0.796, 0.605, 0.0]       [0.807, 0.59, 0.0]       \nE direction:                  [-0.0, -0.0, 1.0]         [-0.0, -0.0, 1.0]         [0.59, -0.807, 0.0]      \nD direction:                  [-0.0, -0.0, 1.0]         [-0.0, -0.0, 1.0]         [0.605, -0.796, 0.0]     \nGDD (fs²/mm):                 16.592                    89.684                    153.153                  \nTOD (fs³/mm):                 70.119                    35.846                    46.928                   \nω BW × L (GHz·cm):            872.759                   464.602                   993.454                  \nT BW × L (K·cm):              20.621                   \nθ BW × L (mrad·cm):           Inf                      \nϕ BW × L (mrad·cm):           1.202                    \nd_eff (pm/V):                 -0.704 (w/o Miller scaling: -0.686)\nS₀ × L² (W):                  1.620e+08 (w/o Miller scaling: 1.700e+08)\n────────────────────────────────────────────────────────────────────────────────────────────────────────","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"More examples are available in the examples section.","category":"page"},{"location":"utils/#Utility-functions","page":"Utils","title":"Utility functions","text":"","category":"section"},{"location":"utils/","page":"Utils","title":"Utils","text":"Modules = [NonlinearCrystals]\nPages = [\"utils.jl\"]","category":"page"},{"location":"utils/#NonlinearCrystals.all_bidirectionalcrystals-Tuple{}","page":"Utils","title":"NonlinearCrystals.all_bidirectionalcrystals","text":"all_bidirectionalcrystals()\n\nReturn all available subtypes of BidirectionalCrystal defined in the NonlinearCrystals module.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.all_nonlinearcrystals-Tuple{}","page":"Utils","title":"NonlinearCrystals.all_nonlinearcrystals","text":"all_nonlinearcrystals()\n\nReturn all available subtypes of NonlinearCrystal defined in the NonlinearCrystals module.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.all_unidirectionalcrystals-Tuple{}","page":"Utils","title":"NonlinearCrystals.all_unidirectionalcrystals","text":"all_unidirectionalcrystals()\n\nReturn all available subtypes of UnidirectionalCrystal defined in the NonlinearCrystals module.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.angles_to_vector-Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}}","page":"Utils","title":"NonlinearCrystals.angles_to_vector","text":"angles_to_vector(θ::Angle, ϕ::Angle) -> SVector{3,Float64}\n\nReturns a unit direction vector corresponding to spherical angles (θ, ϕ).\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.auto_fmt-Tuple{Any}","page":"Utils","title":"NonlinearCrystals.auto_fmt","text":"auto_fmt(x; digits=3, sci_thresh=1e4, inf_thresh=1e10) -> String\n\nFormats a numeric value x into a compact string:\n\nUses scientific notation for large/small values\nDisplays \"Inf\" or \"NaN\" for extreme cases\nControls decimal digits via digits\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.axes_to_θ_ϕ-Tuple{Union{Symbol, AbstractVector{Symbol}}}","page":"Utils","title":"NonlinearCrystals.axes_to_θ_ϕ","text":"axes_to_θ_ϕ(axes::Union{Symbol, Vector{Symbol}}) -> Vector{Tuple{Angle, Angle}}\n\nMaps symbolic crystal axes (:X, :Y, :Z) to corresponding spherical direction angles (θ, ϕ).\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.bool_permutations-Tuple{Any, Any, Integer}","page":"Utils","title":"NonlinearCrystals.bool_permutations","text":"bool_permutations(val1, val2, n) -> Vector{NTuple{n, Any}}\n\nReturns all 2^n permutations of val1 and val2 in an n-element tuple. Useful for enumerating polarization combinations (e.g., :hi / :lo).\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.eigen_2d-Tuple{AbstractMatrix}","page":"Utils","title":"NonlinearCrystals.eigen_2d","text":"eigen_2d(A::AbstractMatrix) -> (eigenvalues::Vector, eigenvectors::SMatrix{2,2})\n\nReturns sorted real eigenvalues and their corresponding orthonormal eigenvectors for a 2×2 matrix A. In comparison with the eigen implementation in Julia's base, this minimal implementation is compatible with ForwardDiff.jl.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.find_neighbors_within_distance-Tuple{Any, Any, Any}","page":"Utils","title":"NonlinearCrystals.find_neighbors_within_distance","text":"find_neighbors_within_distance(all_x, all_y, d) -> (indices_within_d, dists_within_d)\n\nGiven two vectors all_x and all_y representing 2D point coordinates, and a scalar distance d (with units), this function identifies all neighboring points within distance d of each point using a k-d tree.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.find_principal_planes-Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}}","page":"Utils","title":"NonlinearCrystals.find_principal_planes","text":"find_principal_planes(θ::Angle, ϕ::Angle; angle_tol=0.1u\"°\") -> (Symbol, Symbol)\n\nReturns up to two principal planes (:XY, :XZ, :YZ) to which the vector (θ, ϕ) is approximately aligned. Principal planes are defined as those orthogonal to the X, Y, or Z axes, within the given angular tolerance angle_tol.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.shift_lambda_with_freq-Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐓^-1, U}} where {L, S}} where {T, U}}","page":"Utils","title":"NonlinearCrystals.shift_lambda_with_freq","text":"shift_lambda_with_freq(lambda::Length, Δω::Frequency) -> Length\n\nApplies a frequency shift Δω to the wavelength λ, using the relation:     ω = 2π·c / λ, and then λ' = 2π·c / (ω + Δω) Returns the shifted wavelength.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.sign_switch_fractions-Tuple{AbstractVector}","page":"Utils","title":"NonlinearCrystals.sign_switch_fractions","text":"sign_switch_fractions(vec::Vector) -> (switch_indices, fractions, segment_signs)\n\nGiven a vector of values, detects all zero crossings (i.e., sign changes), and returns:\n\nindices of sign flips\nlinear interpolation fractions where zero-crossings occur\nsign of each segment between crossings\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.split_on_nan-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}} where T","page":"Utils","title":"NonlinearCrystals.split_on_nan","text":"split_on_nan(x::Vector, y::Vector) -> (Vector{Vector}, Vector{Vector})\n\nSplits two paired vectors into subsegments at NaN positions.  Each returned segment pair contains only valid (non-NaN) values.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.subtypes_in_module-Tuple{Module, Any}","page":"Utils","title":"NonlinearCrystals.subtypes_in_module","text":"subtypes_in_module(mod::Module, T; recurse=false) -> Vector{T}\n\nReturns a list of all objects in module mod that are subtypes of type T.\n\nIf recurse=true, submodules will also be searched recursively. Useful for dynamically collecting types defined under a module namespace.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NonlinearCrystals.vector_to_angles-Tuple{AbstractVector{<:Number}}","page":"Utils","title":"NonlinearCrystals.vector_to_angles","text":"vector_to_angles(v::AbstractVector{<:Number}) -> (θ::Angle, ϕ::Angle)\n\nConverts a 3D unit vector v to spherical coordinates:\n\nθ (polar angle): 0 to π\nϕ (azimuthal angle): normalized to [0, 2π)\n\n\n\n\n\n","category":"method"},{"location":"examples/vis_refr_indices/#Inspecting-and-plotting-the-refractive-index","page":"Visualizing refractive indices","title":"Inspecting and plotting the refractive index","text":"","category":"section"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"NonlinearCrystals.jl provides access to refractive index data for a wide range of birefringent nonlinear crystals. Built-in crystals like LBO, BBO, or KTP_F are readily available as objects. Each crystal is defined in its own file under the crystal_data directory.","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"Depending on the nature of the crystal—unidirectional or bidirectional—its birefringence is described via two or three principal refractive indices that depend on both wavelength and temperature. These are provided as SellmeierFunction objects and can be accessed as fields of the crystal:","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"For unidirectional crystals (e.g., BBO):\nBBO.n_o_principal   # ordinary axis\nBBO.n_e_principal   # extraordinary axis\nFor bidirectional crystals (e.g., KTP_F):\nKTP_F.n_X_principal\nKTP_F.n_Y_principal\nKTP_F.n_Z_principal","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"Here's how to evaluate basic refractive and dispersion properties for a principal axis:","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"julia> using NonlinearCrystals, Unitful\n\njulia> n = refractive_index(LBO.n_X_principal, 1064u\"nm\", 300u\"K\")   # Refractive index for polarization along the principal X axis at 1064 nm and 300 K\n1.564762196788999\n\njulia> ng = group_index(LBO.n_X_principal, 1064u\"nm\", 300u\"K\")   # Group index\n1.58131698872782\n\njulia> β₂ = β2(LBO.n_X_principal, 1064u\"nm\", 300u\"K\")   # Group delay dispersion (GDD)\n1.7872825157935612e-26 s^2 m^-1","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"All inputs and outputs of NonlinearCrystals.jl have physical units based on Unitful.jl. It is easy to convert those if needed:","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"julia> β₂ |> u\"fs^2/mm\"\n17.872825157935612 fs^2 mm^-1","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"To analyze thermal effects, you can also compute the thermo-optic coefficient:","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"julia> dn_dT = dn_dtemp(LBO.n_X_principal, 1064u\"nm\", 300u\"K\")  # ∂n/∂T at 1064 nm and 300 K\n-2.3793331118400023e-6 K^-1","category":"page"},{"location":"examples/vis_refr_indices/#Querying-refractive-indices","page":"Visualizing refractive indices","title":"Querying refractive indices","text":"","category":"section"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"These principal indices apply when the electric field is aligned with the corresponding dielectric axis. For arbitrary propagation directions or polarizations, you can compute direction-dependent refractive indices, specified for polar angles θ and ϕ:","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"julia> RefractionDataHiLo(45u\"°\", 10u\"°\", LNB_C, 532u\"nm\"; temp= 349u\"K\")\n\nCrystal:                  LNB (Lithium Niobate, congruent melt with mole ratio Li/Nb 0.946)\nWavelength (nm):          532.0\nk angles:                 θ: 45.00°, ϕ: 10.00°\nk direction:              [0.696, 0.123, 0.707]    \nTemperature:              349.00 K (75.85 °C)\n───────────────────────────────────────────────────────────────────────────\nRefractive index type:    hi (o)                    lo (e)                   \nPhase velocity / c₀:      2.324                     2.279                    \nGroup velocity / c₀:      2.586                     2.523                    \nWalkoff angle (mrad):     0.000                     37.905                   \nS direction:              [0.696, 0.123, 0.707]     [0.669, 0.118, 0.733]    \nE direction:             ±[-0.174, 0.985, -0.0]    ±[-0.722, -0.127, 0.68]  \nD direction:             ±[-0.174, 0.985, -0.0]    ±[-0.696, -0.123, 0.707] \nGDD (fs²/mm):             896.823                   825.030                  \nTOD (fs³/mm):             544.009                   489.841","category":"page"},{"location":"examples/vis_refr_indices/#Plotting-refractive-index-vs.-wavelength","page":"Visualizing refractive indices","title":"Plotting refractive index vs. wavelength","text":"","category":"section"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"You can visualize the dispersion behavior using:","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"plot_refractiveindex(LBO) ","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"To see the temperature dependence:","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"plot_refractiveindex(LBO; temp=[293.15u\"K\", 413.15u\"K\", 533.15u\"K\"])","category":"page"},{"location":"examples/vis_refr_indices/","page":"Visualizing refractive indices","title":"Visualizing refractive indices","text":"This will generate interactive plots of refractive index as a function of wavelength at different temperatures.","category":"page"}]
}
